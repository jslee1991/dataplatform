apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-config
  namespace: common-datastore
  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: vault
data:
  init.sh: |-
    #!/usr/bin/env bash
    set -uo pipefail
    
    chmod -R 777 /vault/data
    NAMESPACE=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)
    NOW=$(date +%Y%m%d-%H%M%S)
    
    INITIALIZED=$(kubectl exec pod/vault-0 -n $NAMESPACE -- vault status | grep -i "Initialized." | awk '{print $2}');
    if [ "$INITIALIZED" = "true" ];then
        echo "already initialized"
        #kubectl exec vault-1 -n $NAMESPACE -- vault operator raft join http://vault-0.vault-internal.common-datastore:8200
        #kubectl exec vault-2 -n $NAMESPACE -- vault operator raft join http://vault-0.vault-internal.common-datastore:8200
    else
        echo "initializing..."
        kubectl exec vault-0 -n $NAMESPACE -- vault operator init -format=json > /vault/data/vault_init_$NOW.json
        ROOT_TOKEN=$(cat /vault/data/vault_init_$NOW.json | jq -r ".root_token");
        #kubectl delete secret vault-token -n $NAMESPACE
        #kubectl delete secret vault-token -n viola
        #kubectl delete secret vault-token -n cmp
        #kubectl delete secret vault-token -n ncp
        #kubectl delete secret vault-token -n contrabass

        kubectl create secret generic vault-token --from-literal=token=$ROOT_TOKEN -n $NAMESPACE
        kubectl create secret generic vault-token --from-literal=token=$ROOT_TOKEN -n viola
        kubectl create secret generic vault-token --from-literal=token=$ROOT_TOKEN -n cmp
        kubectl create secret generic vault-token --from-literal=token=$ROOT_TOKEN -n ncp
        kubectl create secret generic vault-token --from-literal=token=$ROOT_TOKEN -n contrabass

        sleep 10;
        kubectl exec vault-1 -n $NAMESPACE -- vault operator raft join http://vault-0.vault-internal.common-datastore:8200
        kubectl exec vault-2 -n $NAMESPACE -- vault operator raft join http://vault-0.vault-internal.common-datastore:8200

        sleep 10;
        kubectl exec vault-0 -n $NAMESPACE -- vault login $ROOT_TOKEN;
        kubectl exec vault-0 -n $NAMESPACE -- vault secrets enable -version=2 -path="secret" kv;
        kubectl exec vault-0 -n $NAMESPACE -- vault kv put -mount=secret prd/portal/paas test=test;

    fi

    
    sleep 99999999999
  extraconfig-from-values.hcl: |-
    # disable memory locking. Memory locking is a security measure that prevents sensitive data from being swapped to disk, but it can cause issues on certain systems. 
    disable_mlock = true
    ui = true
    
    # a listener configuration for TCP connections.
    listener "tcp" {
      tls_disable = 1
      address = "[::]:8200"
      cluster_address = "[::]:8201"
    }
    storage "raft" {
      path = "/vault/data"
    }
    
    # Example configuration for using auto-unseal, using Google Cloud KMS. The
    # GKMS keys must already exist, and the cluster must have a service account
    # that is authorized to access GCP KMS.
    #seal "gcpckms" {
    #   project     = "vault-helm-dev"
    #   region      = "global"
    #   key_ring    = "vault-helm-unseal-kr"
    #   crypto_key  = "vault-helm-unseal-key"
    #}
    
    seal "transit" {
      address = "TRANSIT_ADDR"
      token = "TRANSIT_TOKEN"
      disable_renewal = "false"
      key_name = "autounseal"
      mount_path = "transit/"
      tls_skip_verify = "true"
    }
