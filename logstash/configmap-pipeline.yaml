---
# Source: logstash/templates/configmap-pipeline.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-logstash-pipeline
  labels:
    app: "logstash-logstash"
    chart: "logstash"
    heritage: "Helm"
    release: "logstash"
data:
  topic-contrabass.conf: |
    input { kafka { bootstrap_servers => "kafka-cluster-kafka-bootstrap.default.svc:9092" topics => ["sym-metric-01","sym-metric-02","sym-metric-03","sym-log-01","sym-log-02","sym-log-03","sym-packet"] codec => json {} group_id => "sym-metric" client_id => "sym-metric-logstash-2" }
    
    } filter { if "metricbeat" in [agent][type] { if "socket_summary" in [metricset][name] { drop { } } if "process" in [metricset][name] { drop { } } if "fsstat" in [metricset][name] { drop { } } if "node03.dev.klid.go.kr" in [host][hostname] { drop { } }
    if "filesystem" in [metricset][name] { if "ext" not in [system][filesystem][type] { drop { } } }
    mutate { add_field => { "tmp_timestamp" => "" } }
    ruby { code => "event.set('tmp_timestamp', event.get('@timestamp').time.strftime('%Y-%m-%d %H:%M:%S'))" }
    grok { "match" => { "tmp_timestamp" => "%{INT:year_tmp}-%{MONTHNUM:month_tmp}-%{MONTHDAY:day_tmp} %{INT:hour_tmp}:%{INT:minute_tmp}:%{INT:second_tmp}" } }
    mutate { convert => { "second_tmp" => "integer" } }
    mutate { add_field => { "datetime" => "%{year_tmp}-%{month_tmp}-%{day_tmp} %{hour_tmp}:%{minute_tmp}:%(sec)" } convert => { "datetime" => "string" }
    rename => { "[system][process][cgroup][cpuacct][percpu][1]" => "[system][process][cgroup][cpuacct][percpu][c01]" "[system][process][cgroup][cpuacct][percpu][2]" => "[system][process][cgroup][cpuacct][percpu][c02]" "[system][process][cgroup][cpuacct][percpu][3]" => "[system][process][cgroup][cpuacct][percpu][c03]" "[system][process][cgroup][cpuacct][percpu][4]" => "[system][process][cgroup][cpuacct][percpu][c04]" "[system][process][cgroup][cpuacct][percpu][5]" => "[system][process][cgroup][cpuacct][percpu][c05]" "[system][process][cgroup][cpuacct][percpu][6]" => "[system][process][cgroup][cpuacct][percpu][c06]" "[system][process][cgroup][cpuacct][percpu][7]" => "[system][process][cgroup][cpuacct][percpu][c07]" "[system][process][cgroup][cpuacct][percpu][8]" => "[system][process][cgroup][cpuacct][percpu][c08]" "[system][process][cgroup][cpuacct][percpu][9]" => "[system][process][cgroup][cpuacct][percpu][c09]" "[system][process][cgroup][cpuacct][percpu][10]" => "[system][process][cgroup][cpuacct][percpu][c10]" "[system][process][cgroup][cpuacct][percpu][11]" => "[system][process][cgroup][cpuacct][percpu][c11]" "[system][process][cgroup][cpuacct][percpu][12]" => "[system][process][cgroup][cpuacct][percpu][c12]" "[system][process][cgroup][cpuacct][percpu][13]" => "[system][process][cgroup][cpuacct][percpu][c13]" "[system][process][cgroup][cpuacct][percpu][14]" => "[system][process][cgroup][cpuacct][percpu][c14]" "[system][process][cgroup][cpuacct][percpu][15]" => "[system][process][cgroup][cpuacct][percpu][c15]" "[system][process][cgroup][cpuacct][percpu][16]" => "[system][process][cgroup][cpuacct][percpu][c16]" "[system][process][cgroup][cpuacct][percpu][17]" => "[system][process][cgroup][cpuacct][percpu][c17]" "[system][process][cgroup][cpuacct][percpu][18]" => "[system][process][cgroup][cpuacct][percpu][c18]" "[system][process][cgroup][cpuacct][percpu][19]" => "[system][process][cgroup][cpuacct][percpu][c19]" "[system][process][cgroup][cpuacct][percpu][20]" => "[system][process][cgroup][cpuacct][percpu][c20]" "[system][process][cgroup][cpuacct][percpu][21]" => "[system][process][cgroup][cpuacct][percpu][c21]" "[system][process][cgroup][cpuacct][percpu][22]" => "[system][process][cgroup][cpuacct][percpu][c22]" "[system][process][cgroup][cpuacct][percpu][23]" => "[system][process][cgroup][cpuacct][percpu][c23]" "[system][process][cgroup][cpuacct][percpu][24]" => "[system][process][cgroup][cpuacct][percpu][c24]" "[system][process][cgroup][cpuacct][percpu][25]" => "[system][process][cgroup][cpuacct][percpu][c25]" "[system][process][cgroup][cpuacct][percpu][26]" => "[system][process][cgroup][cpuacct][percpu][c26]" "[system][process][cgroup][cpuacct][percpu][27]" => "[system][process][cgroup][cpuacct][percpu][c27]" "[system][process][cgroup][cpuacct][percpu][28]" => "[system][process][cgroup][cpuacct][percpu][c28]" "[system][process][cgroup][cpuacct][percpu][29]" => "[system][process][cgroup][cpuacct][percpu][c29]" "[system][process][cgroup][cpuacct][percpu][30]" => "[system][process][cgroup][cpuacct][percpu][c30]" "[system][process][cgroup][cpuacct][percpu][31]" => "[system][process][cgroup][cpuacct][percpu][c31]" "[system][process][cgroup][cpuacct][percpu][32]" => "[system][process][cgroup][cpuacct][percpu][c32]"
    "[system][load][1]" => "[system][load][1m]" "[system][load][5]" => "[system][load][5m]" "[system][load][15]" => "[system][load][15m]" "[system][load][norm][1]" => "[system][load][norm][1m]" "[system][load][norm][5]" => "[system][load][norm][5m]" "[system][load][norm][15]" => "[system][load][norm][15m]" }
    remove_field => [ "year_tmp","month_tmp","day_tmp","hour_tmp","minute_tmp","second_tmp","sec","tmp_timestamp" ] }
    date { match => ["datetime", "yyyy-MM-dd HH:mm:ss"] timezone => "UTC" locale => "ko" target => "datetime" }
    }
    else if "filebeat" in [agent][type] {
    if "beat" in [message] { drop { } }
    if "syslog" in [log][file][path] { grok { match => { "message" => "%{HOSTNAME:hostname} %{SYSLOGPROG}:%{GREEDYDATA:tmp_message}" } }
    mutate { replace => { "message" => "%{tmp_message}" }
    remove_field => [ "hostname", "tmp_message" ] } } }
    mutate { remove_field => [ "[host][os]","[host][mac]","[host][containerized]","[host][ip]","[host][architecture]","[host][name]","[ecs]","[agent][hostname]","[agent][version]","[agent][ephemeral_id]","[agent][name]","[agent][id]" ] } }
    output { if "filebeat" in [agent][type] { if "syslog" in [log][file][path] { opensearch { hosts => ["https://opensearch-cluster-master:9200"] ssl => false ssl_certificate_verification => false index => "sym-log-syslog" user => "admin" password => "admin" } } else if "auth" in [log][file][path] { opensearch { hosts => ["https://opensearch-cluster-master:9200"] ssl => false ssl_certificate_verification => false index => "sym-log-auth" user => "admin" password => "admin" } } else if "nova-compute" in [log][file][path] { opensearch { hosts => ["https://opensearch-cluster-master:9200"] ssl => false ssl_certificate_verification => false index => "sym-nova-compute" user => "admin" password => "admin" } } else if "nova-api" in [log][file][path] { opensearch { hosts => ["https://opensearch-cluster-master:9200"] ssl => false ssl_certificate_verification => false index => "sym-nova-api" user => "admin" password => "admin" } } else if "nova-scheduler" in [log][file][path] { opensearch { hosts => ["https://opensearch-cluster-master:9200"] ssl => false ssl_certificate_verification => false index => "sym-nova-scheduler" user => "admin" password => "admin" } }
    else if "containers" in [log][file][path] { opensearch { hosts => ["https://opensearch-cluster-master:9200"] ssl => false ssl_certificate_verification => false index => "sym-log-container" user => "admin" password => "admin" } } } else if "metricbeat" in [agent][type] { if "kubernetes" in [service][type] { opensearch { hosts => ["https://opensearch-cluster-master:9200"] ssl => false ssl_certificate_verification => false index => "sym-kube-%{[metricset][name]}" user => "admin" password => "admin" } } else if "vsphere" in [service][type] { opensearch { hosts => ["https://opensearch-cluster-master:9200"] ssl => false ssl_certificate_verification => false index => "sym-metric-vsphere" user => "admin" password => "admin" } } else { opensearch { hosts => ["https://opensearch-cluster-master:9200"] ssl => false ssl_certificate_verification => false index => "sym-metric-%{[metricset][name]}" user => "admin" password => "admin" } } } else { opensearch { hosts => ["https://opensearch-cluster-master:9200"] ssl => false ssl_certificate_verification => false index => "sym-kube-state-pod" user => "admin" password => "admin" } } }
